# generated from buildfarm_perf_tests/test/test_performance.py.in
# generated code does not contain a copyright notice

from glob import glob
import os
import sys
import tempfile
import unittest

from buildfarm_perf_tests.launch import assert_wait_for_successful_exit
from buildfarm_perf_tests.test_results import read_performance_test_csv
from buildfarm_perf_tests.test_results import write_jenkins_benchmark_json
from buildfarm_perf_tests.test_results import write_jenkins_plot_csv
from launch import LaunchDescription
from launch.actions import OpaqueFunction
from launch_ros.actions import Node
import launch_testing.markers

import matplotlib  # noqa: F401
import matplotlib.pyplot as plt
import numpy as np  # noqa: F401
import pandas as pd

from rclpy import get_rmw_implementation_identifier

plt.switch_backend('agg')

BYTE_TO_MBYTE = 1 / (1024*1024)
BYTE_TO_KBYTE = 1 / (1024)


def _cleanUpLogs(log_pattern):
    for log in glob(log_pattern):
        os.remove(log)


def _raw_to_jenkins(dataframe, csv_path):
    """
    Convert from the raw csv data to formats consumble by Jenkins plugins.

    Do not change the order of the columns in the csv file. The plot plugin
    indexes into the csv using the column number instead of the column name,
    because we're using the columns to identify which test produced the data.

    Changing the column names here will change the name of the line that
    appears on the plot.
    """
    dataframe_agg = dataframe.agg(['max', 'mean', 'sum', 'median'])

    values = [
        dataframe_agg.loc['mean', 'latency_mean (ms)'],
        dataframe_agg.loc['median', 'latency_mean (ms)'],
        dataframe['latency_mean (ms)'].describe(percentiles=[0.95]).iloc[5],
        dataframe_agg.loc['max', 'ru_maxrss'],
        dataframe_agg.loc['mean', 'received'],
        dataframe_agg.loc['mean', 'sent'],
        dataframe_agg.loc['sum', 'lost'],
        dataframe_agg.loc['mean', 'cpu_usage (%)'],
        dataframe['cpu_usage (%)'].describe(percentiles=[0.95]).iloc[5],
        dataframe_agg.loc['median', 'cpu_usage (%)'],
        dataframe_agg.loc['mean', 'data_received'] * BYTE_TO_MBYTE,
        dataframe_agg.loc['median', 'data_received'] * BYTE_TO_MBYTE,
        dataframe['data_received'].describe(percentiles=[0.95]).iloc[5] * BYTE_TO_MBYTE,
    ]

    write_jenkins_plot_csv(csv_path, '@TEST_NAME_SYNC_TOPIC@', values)

    json_path = os.path.splitext(csv_path)[0] + '.benchmark.json'
    json_values = {
        'parameters': {
            'runtime': {
                'value': '@PERF_TEST_RUNTIME@',
                'unit': 's',
            },
            'process_count': {
                'value': '@NUMBER_PROCESS@',
            },
            'message_type': {
                'value': '@PERF_TEST_TOPIC@',
            },
        },
        'average_single_trip_time': {
            'dblValue': values[0],
            'unit': 'ms',
        },
        'throughput': {
            'dblValue': values[10],
            'unit': 'Mbit/s',
        },
        'max_resident_set_size': {
            'dblValue': values[3],
            'unit': 'MB',
        },
        'received_messages': {
            'dblValue': values[4],
        },
        'sent_messages': {
            'dblValue': values[5],
        },
        'lost_messages': {
            'intValue': values[6],
        },
        'cpu_usage': {
            'dblValue': values[8],
            'unit': 'percent',
        },
    }

    group_name = 'buildfarm_perf_tests.performance'
    if '@NUMBER_PROCESS@' == '2':
        group_name += '_two_process'

    write_jenkins_benchmark_json(
        json_path,
        group_name,
        {'@TEST_NAME@_@PERF_TEST_TOPIC@': json_values})


def _raw_to_png(dataframe, png_path):
    pd.options.display.float_format = '{:.4f}'.format

    dataframe = dataframe.copy()

    dataframe['maxrss (Mb)'] = dataframe['ru_maxrss'] * BYTE_TO_KBYTE
    dataframe.drop(list(dataframe.filter(regex='ru_')), axis=1, inplace=True)
    dataframe['latency_variance (ms) * 100'] = 100.0 * dataframe['latency_variance (ms)']
    percentils_latency = dataframe['latency_mean (ms)'].describe(percentiles=[0.95])
    dataframe['latency_p95 (ms)'] = percentils_latency.iloc[5]
    ax = dataframe[['T_experiment',
                    'latency_min (ms)',
                    'latency_max (ms)',
                    'latency_mean (ms)',
                    'latency_p95 (ms)',
                    'latency_variance (ms) * 100',
                    'maxrss (Mb)']].plot(x='T_experiment', secondary_y=['maxrss (Mb)'])

    plot_name = 'One Process'

    if '@NUMBER_PROCESS@' == '2':
        plot_name = 'Two Processes'

    plt.title('Performance ' + plot_name +
              ' tests latency\n@TEST_NAME@ @SYNC_MODE@ @PERF_TEST_TOPIC@')
    ax.set_ylabel('ms')
    plt.savefig(png_path)

    dataframe['data_received Mbits/s'] = dataframe['data_received'] * BYTE_TO_MBYTE
    percentils_data_received = dataframe['data_received Mbits/s'].describe(percentiles=[0.95])
    dataframe['data_received Mbits/s (P95)'] = percentils_data_received.iloc[5]
    ax = dataframe[['T_experiment',
                    'data_received Mbits/s',
                    'data_received Mbits/s (P95)']].plot(x='T_experiment')
    plt.title('Performance ' + plot_name
              + ' Throughput (Mbits/s) Tests\n@TEST_NAME@ @SYNC_MODE@ @PERF_TEST_TOPIC@')
    ax.set_ylabel('Mbits/s')
    plt.savefig(png_path[:-4] + '_throughput.png')

    ax = dataframe[['T_experiment', 'cpu_usage (%)']].plot(x='T_experiment')
    plt.title('Performance ' + plot_name
              + ' tests CPU usage (%)\n@TEST_NAME@ @SYNC_MODE@ @PERF_TEST_TOPIC@')
    ax.set_ylabel('%')
    plt.savefig(png_path[:-4] + '_cpu_usage.png')

    ax = dataframe.plot(kind='bar', y=['received', 'sent', 'lost'])
    plt.title(plot_name
              + ' Received/Sent messages per second and Lost messages\n'
              + '@TEST_NAME@ @SYNC_MODE@ @PERF_TEST_TOPIC@')
    ax.set_ylabel('Number of messages')
    plt.savefig(png_path[:-4] + '_histogram.png')


@launch_testing.markers.keep_alive
def generate_test_description(ready_fn):
    if '@COMM@' == 'ROS2':
        expected_rmw_implementation = '@RMW_IMPLEMENTATION@'
        rmw_implementation_identifier = get_rmw_implementation_identifier()
        assert rmw_implementation_identifier == expected_rmw_implementation, \
            f'{rmw_implementation_identifier} != {expected_rmw_implementation}'

    performance_log_prefix = tempfile.mkstemp(
        prefix='performance_test_@TEST_NAME@_', text=True)[1]

    # perf_test will create its own logs with this prefix
    # we just need the prefix to be unique
    os.remove(performance_log_prefix)

    arguments = [
        '-c', '@COMM@',
        '-t', '@PERF_TEST_TOPIC@',
        '--max_runtime', '@PERF_TEST_RUNTIME@',
        '--ignore', '3',
        '--keep_last',
        '--history_depth', '10',
    ] + ([
        '--disable-async',
    ] if '@SYNC_MODE@' == 'sync' and '@COMM@' != 'ROS2' else [])

    nodes = []

    if @NUMBER_PROCESS@ == 2:
        # Publisher node. It has 0 subscribers
        node_pub = Node(
          package='performance_test',
          executable='perf_test',
          output='log',
          arguments=arguments + [
              '-s', '0',
          ],
        )
        nodes.append(node_pub)

        # Add 0-publishers flag to arguments for node_under_test, which in the
        # case of 2 processes will be a subscriber.
        arguments += ['-p', '0']

    # node_under_test is the node in charge of logging the results, since the
    # measurements are always taken in the subscriber. This node behaves
    # differently depending on the number of processes involved:
    #   - 1 process: The node has a publisher and a subscriber
    #   - 2 processes: The node only has a subscriber
    node_under_test = Node(
        package='performance_test',
        executable='perf_test',
        output='log',
        arguments=arguments + [
            '-l', performance_log_prefix,
        ],
    )
    nodes.append(node_under_test)

    return LaunchDescription(nodes + [
        OpaqueFunction(function=lambda context: ready_fn()),
    ]), locals()


class PerformanceTestResults(unittest.TestCase):

    def test_results_@TEST_NAME@(
            self, proc_info, nodes, performance_log_prefix):
        self.addCleanup(_cleanUpLogs, performance_log_prefix + '*')

        timeout = @PERF_TEST_RUNTIME@ * 2
        for process in nodes:
            assert_wait_for_successful_exit(proc_info, process, timeout)

        results_base_path = os.environ.get('PERF_TEST_RESULTS_BASE_PATH')
        if results_base_path:
            performance_logs = glob(performance_log_prefix + '*')
            assert len(performance_logs) == 1
            performance_data = read_performance_test_csv(performance_logs[0])
            _raw_to_jenkins(performance_data, results_base_path + '.csv')
            _raw_to_png(performance_data, results_base_path + '.png')
        else:
            print(
                'No results reports written - set PERF_TEST_RESULTS_BASE_PATH to write reports',
                file=sys.stderr)
